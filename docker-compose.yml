---

x-wal-g: &wal-g
  image: ${WAL_G_IMAGE:-stratospire/wal-g:1.0}
  environment:
    # ðŸ’¿ Postgres
    PGHOST: ${POSTGRES_HOST:-127.0.0.1}
    PGPORT: ${POSTGRES_PORT:-5432}
    PGUSER: ${POSTGRES_USER:-postgres}
    PGPASSWORD: ${POSTGRES_PASS:-postgres}
    PGDATABASE: ${POSTGRES_DB:-postgres}
    WALG_FILE_PREFIX: ${WALG_FILE_PREFIX}
    BACKUP_TYPE: ${BACKUP_TYPE:-full}
    # ðŸ’¾ S3-Ñ…Ñ€Ð°Ð½Ð¸Ð»Ð¸Ñ‰Ðµ
    WALG_S3_PREFIX: ${S3_PREFIX}
    AWS_ACCESS_KEY_ID: ${S3_USER}
    AWS_SECRET_ACCESS_KEY: ${S3_PASS}
    AWS_ENDPOINT: ${S3_HOST}
    AWS_REGION: ${AWS_REGION}
    AWS_S3_FORCE_PATH_STYLE: "true"
    # ðŸ’¾ Backups
    BACKUP_NAME: ${BACKUP_NAME:-auto_backup_$(date +%Y-%m-%d_%H-%M-%S)}
    # RESTORE_BACKUP_NAME: ${RESTORE_BACKUP_NAME:-LATEST}
  volumes:
    - ./backups:/var/lib/wal-g/backups:z
    - ./restore:/var/lib/wal-g/restore:z
    - $DB_VOLUME:/var/lib/postgresql/data:z

services:
  wal-g-backup:
    <<: *wal-g
    container_name: wal-g-backup
    command: >
      bash -c "
        if [ \"$${BACKUP_TYPE}\" = 'incr' ]; then
          echo 'ðŸŸ¡ $${INCR_BACKUP_TEXT:-Incremental backup is in progress}...';
          wal-g backup-push /var/lib/postgresql/data;
        else
          echo 'ðŸŸ¢ $${FULL_BACKUP_TEXT:-Full backup is in progress}...';
          wal-g backup-push /var/lib/postgresql/data --full;
        fi
      "
    networks:
      network:
        ipv4_address: $BACKUP_HOST

  wal-g-restore:
    <<: *wal-g
    container_name: wal-g-restore
    # command: >
    #   "wal-g backup-fetch /var/lib/postgresql/data \"$${RESTORE_BACKUP_NAME:-LATEST}\";"
    networks:
      network:
        ipv4_address: $RESTORE_HOST

  wal-g-list:
    <<: *wal-g
    container_name: wal-g-list
    entrypoint: /bin/sh
    command: -c 'wal-g backup-list | tail -n +2 | awk '\''{gsub(/T/, " ",$2); gsub(/\.[0-9]+Z/, "", $2); gsub(/Z/, "", $2); print $2}'\'''
    networks:
      network:
        ipv4_address: $LIST_HOST

  wal-g-test:
    <<: *wal-g
    container_name: wal-g-test
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do sleep 3600; done"]
    networks:
      network:
        ipv4_address: $TEST_HOST
    restart: unless-stopped

networks:
  network:
    name: $POSTGRES_NET
    external: true
    driver: bridge
